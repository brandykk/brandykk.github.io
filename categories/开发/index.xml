<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发 on Brandy</title>
    <link>https://brandykk.github.io/categories/%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 开发 on Brandy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Sun, 20 Jun 2021 16:18:38 +0800</lastBuildDate>
    <atom:link href="https://brandykk.github.io/categories/%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java面试题</title>
      <link>https://brandykk.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Sun, 20 Jun 2021 16:18:38 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>Spring 1. spring的优良特性 非侵入式: 基于spring开发的应用中的对象可以不依赖于spring的API; 依赖注入: DI,反转控制(IOC)最经典的实现 面向切面:AOP 容器:spring是一个容器,因为它包含并且管理应用对象的生命周期 组件化: spring实现了使用简单的组件配置组合成一个复杂的应用,在spring中可以使用XML和JAVA注解组合这些对象 一站式: 在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方库(实际上spring自身也提供了表述层的springMVC和持久层的springJDBC) 2. SpringBean生命周期 Bean从创建到销毁的整个过程： 分4大步：&#xA;实例化 通过反射去推断构造函数进行实例化 实例工厂、静态工厂 属性赋值 解析自动装配（DI的体现） 循环依赖 初始化 调用XXXAware回调方法 调用初始化生命周期回调（三种） 如果bean实现AOP,创建动态代理 销毁 在spring容器关闭的时候进行调用 调用销毁生命周期回调 3. IOC 控制反转：当我们创建对象时使用new来创建，比如UserService service = new UserService（）但是当我们改变创建的对象时需要更改每一个类中的new Service&#xA;所以便引入了IOC，IOC是一种思想，IOC负责创建对象、管理对象（DI：@Autowired、set方法、构造器）、装配对象、配置对象，并且管理这些对象的整个生命周期。&#xA;优点：&#xA;集中管理对象，方便维护 降低偶和度 最小代价和最小侵入性使松散偶和得以实现 IOC容器支持加载服务时的饿汉式初始化和懒加载 4. Spring事务 编程式事务： 通过编程方式在代码中管理事务，有极大的灵活性，但是难维护。&#xA;声明式事务： 使用注解和XML配置来管理事务，将业务代码和事务管理分离。&#xA;实现方式：&#xA;基于接口（不建议，不利于维护） 基于XML配置 使用注解 5. Spring事务隔离 脏读：一个事务读取了另一个事务中没有提交的数据 不可重复读：同一个事务中多次读取相同的数据时有另一个事务修改了数据，导致在同一个事务中多次读取出来的结果不一样 幻读：事务A对表中所有的数据进行修改，同时事务B在此表中添加了一条数据，此时会发生执行事务A的用户发现还有没有修改的数据，就像发生了幻觉一样 隔离级别&#xA;DEFAULT 使用数据库本身使用的隔离级别 ORACLE（读已提交） MySQL（可重复读） READ_UNCOMITTED 读未提交（脏读）最低的隔离级别，一切皆有可能。 READ_COMMITED 读已提交，ORACLE默认隔离级别，有幻读以及不可重复读风险。 REPEATABLE_READ 可重复读，解决不可重复读的隔离级别，但还是有幻读风险。 SERLALIZABLE 串行化，最高的事务隔离级别，不管多少事务，挨个运行完一个事务的所有子事务之后才可以执行另外一个事务里面的所有子事务，这样就解决了脏读、不可重复读和幻读的问题了 6.</description>
    </item>
    <item>
      <title>Java验证码</title>
      <link>https://brandykk.github.io/posts/java/java%E9%AA%8C%E8%AF%81%E7%A0%81/</link>
      <pubDate>Sun, 20 Jun 2021 13:58:34 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/java/java%E9%AA%8C%E8%AF%81%E7%A0%81/</guid>
      <description>Utility.java import org.apache.commons.lang3.StringUtils; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import java.math.BigDecimal; import java.text.SimpleDateFormat; import java.util.*; public class Utility { protected final static Log logger = LogFactory.getLog(Utility.class); public static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; newArray(int size, Class&amp;lt;T&amp;gt; clazz) { List&amp;lt;T&amp;gt; l = new ArrayList&amp;lt;T&amp;gt;(); for (int i = 0; i &amp;lt; size; i++) { T newInstance; try { newInstance = clazz.newInstance(); } catch (Exception e) { newInstance = null; } l.add(newInstance); } return l; } public static String randomString(int len, int type) { StringBuffer str = new StringBuffer(); // 默认去掉了容易混淆的字符oOLlI，要添加请使用addChars参数 String codestr = &amp;#34;ABCDEFGHJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz&amp;#34;; String codeNum = &amp;#34;0123456789&amp;#34;; //&#x9;switch (type) { //&#x9;case 0: //&#x9;codestr = &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&amp;#34;; //&#x9;break; //&#x9;case 1: //&#x9;codestr = &amp;#34;0123456789&amp;#34;; //&#x9;break; //&#x9;case 2: //&#x9;codestr = &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;; //&#x9;break; //&#x9;case 3: //&#x9;codestr = &amp;#34;abcdefghijklmnopqrstuvwxyz&amp;#34;; //&#x9;break; //&#x9;default: //&#x9;// 默认去掉了容易混淆的字符oOLl和数字01，要添加请使用addChars参数 //&#x9;codestr = &amp;#34;ABCDEFGHIJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789&amp;#34;; //&#x9;break; //&#x9;} char[] codes = codestr.</description>
    </item>
    <item>
      <title>Jdk1.8</title>
      <link>https://brandykk.github.io/posts/java/jdk1.8/</link>
      <pubDate>Sun, 20 Jun 2021 13:53:54 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/java/jdk1.8/</guid>
      <description>获取当前日期 LocalDate date = LocalDate.now(); System.out.println(&amp;#34;获取当前日期：&amp;#34; + date); 获取当前日期：2020-12-23 LocalDate.of(int year, int month, int dayOfMonth) 该方法的月份从1开始 LocalDate date = LocalDate.of(2020, 1, 31); System.out.println(&amp;#34;输出时间：&amp;#34; + date); 输出时间：2020-01-31 时间计算 LocalDate date = LocalDate.of(2020, 1, 31); // 加一天，也可以使用负数-1实现减一天 LocalDate date1 = date.plusDays(1); // 加月份 LocalDate date2 = date.plusMonths(1); // 减 LocalDate date3 = date.minusDays(1); System.out.println(&amp;#34;输出时间：&amp;#34; + date); System.out.println(&amp;#34;date加1天：&amp;#34; + date1); System.out.println(&amp;#34;date加1月：&amp;#34; + date2); System.out.println(&amp;#34;date减1天：&amp;#34; + date3); 输出时间：2020-01-31 date加1天：2020-02-01 date加1月：2020-02-29 date减1天：2020-01-30 格式化 1. 字符串、时间转换 DateTimeFormatter formatter = DateTimeFormatter.</description>
    </item>
    <item>
      <title>达梦数据库</title>
      <link>https://brandykk.github.io/posts/java/databases/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sun, 20 Jun 2021 13:50:00 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/java/databases/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>查询模式sql -- 获取当前用户下的所有表 SELECT * FROM user_tables ORDER BY table_name; -- 获取当前用户下的模式名 SELECT distinct object_name FROM all_objects WHERE object_type=&amp;#39;SCH&amp;#39;; -- 获取当前用户下模式（库）的信息 SELECT * FROM dba_segments; -- 获取模式下的表 SELECT table_name FROM dba_tables WHERE owner=&amp;#39;模式（库）名&amp;#39;; 常用函数 wm_concat(column)&#x9;分组时,将其他字段用,分割显示 </description>
    </item>
    <item>
      <title>Git基础</title>
      <link>https://brandykk.github.io/posts/tool/git%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 20 Jun 2021 13:45:44 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/tool/git%E5%9F%BA%E7%A1%80/</guid>
      <description>git命令 # 全局设置提交代码的联系邮箱 git config --global user.email &amp;#34;mescal1993@hotmail.com&amp;#34; # 全局设置提交代码的显示名称 git config --global user.name &amp;#34;lv&amp;#34; # 解决每次提交代码都要输入帐号密码： 执行命令，然后在输入一次就好了 git config --global credential.helper store #初始化本地新的git仓库 git init #克隆github仓库 git clone 地址 #查看状态 git status # .：代表添加所有文件 git add . # 提交到本地仓库 git commit -m &amp;#39;update&amp;#39; # 推送到服务器 git push # 从服务器拉取 git pull # fatal: refusing to merge unrelated histories错误是两个仓库合并导致历史记录不一样导致的 git pull origin master --allow-unrelated-histories --rebase 配置gitee.io 安装hugo&#x9;中文文档 sudo pacman -Sy hugo # 在代码根目录 # 创建新模板 hugo new .</description>
    </item>
    <item>
      <title>Java中list&lt;Map&gt;排序</title>
      <link>https://brandykk.github.io/posts/java/java%E4%B8%ADlist-map%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 19 Jun 2021 22:56:16 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/java/java%E4%B8%ADlist-map%E6%8E%92%E5%BA%8F/</guid>
      <description>//通过key排序 private static void sort1() { //List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt;根据map的key值排序 List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); Map&amp;lt;String,Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); map.put(&amp;#34;a&amp;#34;,&amp;#34;1&amp;#34;); Map&amp;lt;String,Object&amp;gt; map1 = new HashMap&amp;lt;&amp;gt;(); map1.put(&amp;#34;a&amp;#34;,&amp;#34;6&amp;#34;); Map&amp;lt;String,Object&amp;gt; map2 = new HashMap&amp;lt;&amp;gt;(); map2.put(&amp;#34;a&amp;#34;,&amp;#34;3&amp;#34;); Map&amp;lt;String,Object&amp;gt; map3 = new HashMap&amp;lt;&amp;gt;(); map3.put(&amp;#34;a&amp;#34;,&amp;#34;5&amp;#34;); Map&amp;lt;String,Object&amp;gt; map4 = new HashMap&amp;lt;&amp;gt;(); map4.put(&amp;#34;a&amp;#34;,&amp;#34;4&amp;#34;); Map&amp;lt;String,Object&amp;gt; map5 = new HashMap&amp;lt;&amp;gt;(); map5.put(&amp;#34;a&amp;#34;,&amp;#34;2&amp;#34;); list.add(map); list.add(map1); list.add(map2); list.add(map3); list.add(map4); list.add(map5); //重写map的排序方式 Comparator&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; co = new Comparator&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;() { @Override public int compare(Map&amp;lt;String, Object&amp;gt; o1, Map&amp;lt;String, Object&amp;gt; o2) { return String.</description>
    </item>
    <item>
      <title>Java模拟鼠标键盘操作</title>
      <link>https://brandykk.github.io/posts/java/java%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 18 Apr 2021 12:25:27 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/java/java%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/</guid>
      <description>/** * 定时执行模拟鼠标键盘操作 * Robot中主要的鼠标和键盘控制方法有： * • void keyPress(int keycode) 按下给定的键。 * • void keyRelease(int keycode) 释放给定的键。 * • void mouseMove(int x, int y) 将鼠标指针移动到给定屏幕坐标。 * • void mousePress(int buttons) 按下一个或多个鼠标按钮。 * • void mouseRelease(int buttons) 释放一个或多个鼠标按钮。 * • void mouseWheel(int wheelAmt) 在配有滚轮的鼠标上旋转滚轮。 */ private static void mouse(){ new Thread(()-&amp;gt;{ while (true){ try { Thread.sleep(1000*60); Robot robot = new Robot(); //设置Robot产生一个动作后的休眠时间,否则执行过快 robot.setAutoDelay(1000); //获取屏幕分辨率 Dimension d = Toolkit.getDefaultToolkit().getScreenSize(); System.out.println(d); Rectangle screenRect = new Rectangle(d); //截图 BufferedImage bufferedImage = robot.</description>
    </item>
  </channel>
</rss>
