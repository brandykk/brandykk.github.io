<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on BrandyKK</title><link>https://brandykk.github.io/post/</link><description>Recent content in Posts on BrandyKK</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 07 Mar 2024 16:09:02 +0800</lastBuildDate><atom:link href="https://brandykk.github.io/post/rss.xml" rel="self" type="application/rss+xml"/><item><title>Win开发工具安装</title><link>https://brandykk.github.io/post/win/win%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</link><pubDate>Thu, 07 Mar 2024 16:09:02 +0800</pubDate><guid>https://brandykk.github.io/post/win/win%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</guid><description>安装JDK 新建系统变量 变量名： JAVA_HOME 变量值：安装目录 新建CLASSPATH变量 变量名： CLASSPATH 变量值： .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar 添加Path： 在系统变量区域，选择Path,点</description></item><item><title>Linux子系统</title><link>https://brandykk.github.io/post/win/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</link><pubDate>Thu, 07 Mar 2024 16:08:48 +0800</pubDate><guid>https://brandykk.github.io/post/win/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid><description>在win11上安装archlinux子系统 需要先开启linux子系统和虚拟平台服务, 参考 1. 下载linux内核升级包 双击安装即可 2. 将WSL2设</description></item><item><title>服务器证书生成说明</title><link>https://brandykk.github.io/post/linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E8%AF%B4%E6%98%8E/</link><pubDate>Thu, 07 Mar 2024 16:08:27 +0800</pubDate><guid>https://brandykk.github.io/post/linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E8%AF%B4%E6%98%8E/</guid><description>&lt;blockquote>
&lt;p>此文档使用的系统: WSL2-ArchLinux 进行的以下操作：建议用root账号进行操作，并在统一目录下操作。&lt;/p>
&lt;/blockquote></description></item><item><title>ArchLinux安装</title><link>https://brandykk.github.io/post/linux/archlinux%E5%AE%89%E8%A3%85/</link><pubDate>Thu, 07 Mar 2024 16:05:23 +0800</pubDate><guid>https://brandykk.github.io/post/linux/archlinux%E5%AE%89%E8%A3%85/</guid><description>&lt;blockquote>
&lt;p>更新于2023年3月7日；适用于Arch和win11双系统，btrfs文件系统，kde桌面&lt;/p>
&lt;/blockquote></description></item><item><title>docker</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/tool/docker/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/tool/docker/</guid><description>Docker下载 # archlinux sudo pacman -Syu docker docker-compose # 将用户lv追加进docker用户组 # 将当前用户添加进docker用户组 -a append; -G group sudo usermod -a -G docker lv Docker运行 #</description></item><item><title>git基础</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/tool/git%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/tool/git%E5%9F%BA%E7%A1%80/</guid><description>git命令 # 全局设置提交代码的联系邮箱 git config --global user.email &amp;#34;mescal1993@hotmail.com&amp;#34; # 全局设置提交代码的显示名称 git config --global user.name &amp;#34;lv&amp;#34; # 解决每次提交代码都要输入帐号密码： 执行命令，然后在输</description></item><item><title>Java递归</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E6%A0%91%E7%BB%93%E6%9E%84%E9%80%92%E5%BD%92%E5%B0%81%E8%A3%85/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E6%A0%91%E7%BB%93%E6%9E%84%E9%80%92%E5%BD%92%E5%B0%81%E8%A3%85/</guid><description>import java.util.ArrayList; import java.util.Comparator; import java.util.List; public class text { public static void main(String[] args) { //测试方法 Node n1 = new Node(&amp;#34;0&amp;#34;, &amp;#34;根节点&amp;#34;, &amp;#34;-1&amp;#34;, 0); Node n2 = new Node(&amp;#34;01&amp;#34;, &amp;#34;一级子节点&amp;#34;, &amp;#34;0&amp;#34;, 0); Node n3 = new</description></item><item><title>Java工具类</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid><description>java自带的方法 List集合拼接成以逗号分隔的字符串 //将list转为字符串 List&amp;lt;String&amp;gt; strings = Arrays.asList(&amp;#34;a,b,c,d&amp;#34;); //List&amp;lt;String&amp;gt; strings = Collections.singletonList(&amp;#34;a,b,c,d&amp;#34;); System.out.println(strings);//[a,b,c,d] //第一种方法: stream流 String collect = strings.stream().collect(Collectors.joining(&amp;#34;,&amp;#34;)); System.out.println(collect);//a,b,c,d //</description></item><item><title>Java基础</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E5%9F%BA%E7%A1%80/</guid><description>获取当前日期 LocalDate date = LocalDate.now(); System.out.println(&amp;#34;获取当前日期：&amp;#34; + date); 获取当前日期：2020-12-23 LocalDate.of(int year, int month, int</description></item><item><title>Java集合</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E4%B8%ADlist-map%E6%8E%92%E5%BA%8F/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E4%B8%ADlist-map%E6%8E%92%E5%BA%8F/</guid><description>//通过key排序 private static void sort1() { //List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt;根据map的key值排序 List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); Map&amp;lt;String,Object&amp;gt;</description></item><item><title>Java枚举使用</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E6%9E%9A%E4%B8%BE%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E6%9E%9A%E4%B8%BE%E4%BD%BF%E7%94%A8/</guid><description>实现接口,相当于简单的抽象工厂 接口方法 //接口方法 interface EnumInterface{ void show(); } 枚举 //实现接口并重写方法 enum Enumenum implements EnumInterface{ AAA(1){ @Override public void show() { System.out.println(&amp;#34;AAA&amp;#34;); } }, BBB(2){ @Override public void show() { System.out.println(&amp;#34;BBB&amp;#34;); } } ; private int i; /</description></item><item><title>Java模拟鼠标操作</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/</guid><description>/** * 定时执行模拟鼠标键盘操作 * Robot中主要的鼠标和键盘控制方法有： * • void keyPress(int keycode) 按下给定的键。 * • void keyRelease(int keycode) 释放给定的键。 * • void mouseMove(int x, int y) 将鼠标指</description></item><item><title>Java线程</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B/</guid><description>创建线程的方法 继承Thread类,重写run()方法,调用start()方法开启 实现Runnable,重写run()方法,调用start()</description></item><item><title>Java验证码</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E9%AA%8C%E8%AF%81%E7%A0%81/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/java%E9%AA%8C%E8%AF%81%E7%A0%81/</guid><description>Utility.java 验证码调用工具类 import org.apache.commons.lang3.StringUtils; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import java.math.BigDecimal; import java.text.SimpleDateFormat; import java.util.*; public class Utility { protected final static Log logger = LogFactory.getLog(Utility.class); public static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; newArray(int size, Class&amp;lt;T&amp;gt; clazz) { List&amp;lt;T&amp;gt; l = new ArrayList&amp;lt;T&amp;gt;(); for (int i = 0; i &amp;lt; size; i++) { T newInstance; try { newInstance = clazz.newInstance(); } catch (Exception e) { newInstance =</description></item><item><title>Jdbc</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/jdbc/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/jdbc/</guid><description>JDBC程序 private static void jdbcUtil() throws ClassNotFoundException, SQLException { //1. 加载驱动 Class.forName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); //2.用户信息和url /** * useUnicode=true 使用unicode编码,支持中文 * characterEncoding=utf8 设置字符集为UTF-8 * useSSL=true 使用SS</description></item><item><title>springBoot</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/springboot/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/springboot/</guid><description>小彩蛋：修改springboot启动banner,也就是控制台打印的图像 在resources在创建banner.txt,然后把网上复制的ba</description></item><item><title>springMVC</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/springmvc/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/springmvc/</guid><description>SpringMVC MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。 Model（模型） - 模型代</description></item><item><title>spring定时器依赖注入</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/spring%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/spring%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</guid><description>工具类 /** * 创建工具类 **/ public class ApplicationContextUtil implements ApplicationContextAware { private static ApplicationContext applicationContext; public static ApplicationContext getApplicationContext() { return applicationContext; } public void setApplicationContext(ApplicationContext applicationContext) { ApplicationContextUtil.applicationContext = applicationContext; } public static Object getBean(String beanName) { return applicationContext.getBean(beanName); } } 配置bean &amp;lt;bean id =&amp;#34;applicationContextUtil&amp;#34; class =&amp;#34;org.sihai.soil.util.ApplicationContextUtil&amp;#34; &amp;gt;&amp;lt;/bean &amp;gt; 获取service</description></item><item><title>spring简介</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/spring%E7%AE%80%E4%BB%8B/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/spring%E7%AE%80%E4%BB%8B/</guid><description>简介 Spring框架是一个 开放源代码 的 J2EE 应用程序框架，由[Rod Johnson]( https://baike.baidu.com/item/Rod Johnson/1423612)发起，是针对bean的生命周期进行管理的</description></item><item><title>spring要点</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/spring%E8%A6%81%E7%82%B9/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/java/spring/spring%E8%A6%81%E7%82%B9/</guid><description>1. IOC理论推导 1.1. 原来的写法 1.1.1 UserDao接口 public interface UserDao { void getUser(); } 1.1.2 UserDaoImpl实现类 public class UserDaoImpl implements UserDao { @Override public void getUser() { System.out.pr</description></item><item><title>sqlite</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/db/nodejs%E8%BF%9E%E6%8E%A5sqlite%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/db/nodejs%E8%BF%9E%E6%8E%A5sqlite%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>编译nodejs相关模块better-sqlite3 安装 windows-build-tools ， 注意用管理员身份启动终端（如果安装node的时侯已经安装了相关的tools就略过</description></item><item><title>达梦数据库</title><link>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/db/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Thu, 07 Mar 2024 14:40:15 +0800</pubDate><guid>https://brandykk.github.io/post/%E7%BC%96%E7%A8%8B/db/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>&lt;p>达梦数据库&lt;/p></description></item></channel></rss>