<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Brandy</title>
    <link>https://brandykk.github.io/tags/spring/</link>
    <description>Recent content in spring on Brandy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Sat, 07 Aug 2021 21:09:25 +0800</lastBuildDate>
    <atom:link href="https://brandykk.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringMVC</title>
      <link>https://brandykk.github.io/posts/java/spring/springmvc/</link>
      <pubDate>Sat, 07 Aug 2021 21:09:25 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/java/spring/springmvc/</guid>
      <description>SpringMVC MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。&#xA;Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。 View（视图） - 视图代表模型包含的数据的可视化。 Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。 MVC的优点：&#xA;1.耦合性低&#xA;视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。&#xA;2.重用性高&#xA;MVC模式允许使用各种不同样式的视图来访问同一个服务器端的代码，因为多个视图能共享一个模型，它包括任何WEB（HTTP）浏览器或者无线浏览器（wap），比如，用户可以通过电脑也可通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面使用。&#xA;3.部署快，生命周期成本低&#xA;MVC使开发和维护用户接口的技术含量降低。使用MVC模式使开发时间得到相当大的缩减，它使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。&#xA;4.可维护性高&#xA;分离视图层和业务逻辑层也使得WEB应用更易于维护和修改。&#xA;MVC的缺点：&#xA;1.完全理解MVC比较复杂。&#xA;由于MVC模式提出的时间不长，加上同学们的实践经验不足，所以完全理解并掌握MVC不是一个很容易的过程。&#xA;2.调试困难。&#xA;因为模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难，每个构件在使用之前都需要经过彻底的测试。&#xA;3.不适合小型，中等规模的应用程序&#xA;在一个中小型的应用程序中，强制性的使用MVC进行开发，往往会花费大量时间，并且不能体现MVC的优势，同时会使开发变得繁琐。&#xA;4.增加系统结构和实现的复杂性&#xA;对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。&#xA;5.视图与控制器间的过于紧密的连接并且降低了视图对模型数据的访问&#xA;视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。&#xA;依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。&#xA;SpringMVC工作原理 理论 SpringMVC工作原理： 客户端发起请求（http）通过web.xml找到 DispatchServlet（前端控制器）； 由DispatchServlet控制器通过配置文件（servletName-servlet.xml）寻找到一个或多个HandlerMapping（映射处理器），找到用于处理请求的controller（后端控制器）； DispatchServlet将请求提交到controller； Controller处理业务逻辑后， controller返回数据 ModelAndVIew给DispatchServlet； DispatchServlet寻找到一个或多个ViewResolver（视图解析器），找到ModelAndVIew指定的视图； DispatchServle负责将结果返给View（客户端JSP页面），封装Http； view响应页面的HTTP请求，返回响应数据，浏览器绘制页面。 补充：&#xA;第2~3步，里面隐藏了步骤： DispatchServlet 根据 HandlerMapping（专门映射处理器的一个映射器）的配置（用户自己配置的配置文件）找到Handler（处理器），然后由具体的HandlerAdapter处理器对Handler进行处理。&#xA;handler跟controller有啥区别？ controller 是 handler，但是handler不是controller。&#xA;handler接管所有的DispatchServlet给与的处理信息，包括静态请求（http://……/style.css），并且可以改变请求所指向的资源参数如 String target参数。&#xA;controller只做三件事接收参数、调用业务、使用业务结果渲染页面。&#xA;SpringMVC接口解释&#xA;（1）DispatcherServlet接口： Spring提供的前端控制器，所有的请求都有经过它来统一分发。在DispatcherServlet将请求分发给Spring Controller之前，需要借助于Spring提供的HandlerMapping定位到具体的Controller。 （2）HandlerMapping接口： 能够完成客户请求到Controller映射。 （3）Controller接口： 需要为并发用户处理上述请求，因此实现Controller接口时，必须保证线程安全并且可重用。 Controller将处理用户请求，这和Struts Action扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。 从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；从微观考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。 （4）ViewResolver接口： Spring提供的视图解析器（ViewResolver）在Web应用中查找View对象，从而将相应结果渲染给客户。 4.</description>
    </item>
    <item>
      <title>Spring重点</title>
      <link>https://brandykk.github.io/posts/java/spring/spring%E8%A6%81%E7%82%B9/</link>
      <pubDate>Wed, 28 Jul 2021 21:54:52 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/java/spring/spring%E8%A6%81%E7%82%B9/</guid>
      <description>1. IOC理论推导 1.1. 原来的写法 1.1.1 UserDao接口 public interface UserDao { void getUser(); } 1.1.2 UserDaoImpl实现类 public class UserDaoImpl implements UserDao { @Override public void getUser() { System.out.println(&amp;#34;默认获取用户数据&amp;#34;); } } 1.1.3 UserService业务接口 public interface IUserService { void getUser(); } 1.1.4 UserServiceImpl业务实现类 public class UserServiceImpl implements IUserService { private UserDao userDao = new UserDaoImpl(); @Override public void getUser() { userDao.getUser(); } } 1.1.5 UserTest测试 public class UserTest { public static void main(String[] args) { //用户实际调用的业务层，Dao层不会直接调用 IUserService userService = new UserServiceImpl(); userService.</description>
    </item>
    <item>
      <title>Spring定时器依赖注入</title>
      <link>https://brandykk.github.io/posts/java/spring/spring%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Sun, 18 Apr 2021 16:09:32 +0800</pubDate>
      <guid>https://brandykk.github.io/posts/java/spring/spring%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</guid>
      <description> 工具类 /** * 创建工具类 **/ public class ApplicationContextUtil implements ApplicationContextAware { private static ApplicationContext applicationContext; public static ApplicationContext getApplicationContext() { return applicationContext; } public void setApplicationContext(ApplicationContext applicationContext) { ApplicationContextUtil.applicationContext = applicationContext; } public static Object getBean(String beanName) { return applicationContext.getBean(beanName); } } 配置bean &amp;lt;bean id =&amp;#34;applicationContextUtil&amp;#34; class =&amp;#34;org.sihai.soil.util.ApplicationContextUtil&amp;#34; &amp;gt;&amp;lt;/bean &amp;gt; 获取service realmEbi = (RealmEbi) ApplicationContextUtil.getBean(&amp;#34;realmEbi&amp;#34;); realmEbi.insertHour(RealmApplianceModel.sendData3); </description>
    </item>
  </channel>
</rss>
